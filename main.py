from fastapi import FastAPI, Request
from pydantic import BaseModel
from openai import OpenAI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import os

app = FastAPI()

# ‚úÖ –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ CORS)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # ‚Üê –∑–∞–º–µ–Ω–∏–º –ø–æ–∑–∂–µ –Ω–∞ —Ç–≤–æ–π –¥–æ–º–µ–Ω
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# üîë –ö–ª—é—á OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# üì• –í—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
class ChatRequest(BaseModel):
    message: str

# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞
@app.post("/chat")
async def chat(req: ChatRequest):
    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": "You are a helpful assistant specializing in accounting and legal services in Poland. Answer briefly, clearly and professionally."
                },
                {
                    "role": "user",
                    "content": req.message
                }
            ]
        )
        return {"reply": response.choices[0].message.content}
    except Exception as e:
        return {"reply": f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"}

# ‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight-–∑–∞–ø—Ä–æ—Å–∞ (OPTIONS /chat)
@app.options("/chat")
async def options_handler(request: Request):
    return JSONResponse(content={}, status_code=204)
